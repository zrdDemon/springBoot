package

    ${package.Entity};

#if(${activeRecord})


#end

#if(${entityLombokModel})


#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
@Accessors(chain = true)
#end

#if(${superEntityClass})
public class ${entity}  {
#elseif(${activeRecord})
public class ${entity}{
#else
public class ${entity} implements Serializable{
#end



## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
    #end
    #if(${field.keyFlag})
    ## 主键
        #if(${field.keyIdentityFlag})

        #elseif(${field.convert})

        #end
    ## 普通字段
    #elseif(${field.fill})
    ## -----   存在字段填充设置   -----
        #if(${field.convert})

        #else

        #end
    #elseif(${field.convert})

    #end
## 乐观锁注解
    #if(${versionFieldName}==${field.name})
    @Version
    #end
## 逻辑删除注解
    #if(${logicDeleteFieldName}==${field.name})
    @TableLogic
    #end
private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}(){
            return ${field.propertyName};
            }

        #if(${entityBuilderModel})
        public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}){
        #else
        public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
            this.${field.propertyName} = ${field.propertyName};
        #if(${entityBuilderModel})
                return this;
        #end
            }
    #end
#end

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} ="${field.name}";

    #end
#end

#if(!${entityLombokModel})
@Override
public String toString(){
        return"${entity}{"+
    #foreach($field in ${table.fields})
        #if($!{velocityCount}==1)
                "${field.propertyName}="+ ${field.propertyName} +
        #else
                ", ${field.propertyName}="+ ${field.propertyName} +
        #end
    #end
        "}";
        }
#end



public String selectByBean(final ${entity} bean){

     return new SQL(){{



        String rs="#foreach($field in ${table.commonFields})#if(${field.name} == ${field.propertyName})t.${field.name}#else${field.name} AS ${field.propertyName}#end,#end ${table.fieldNames}";

        SELECT(rs);
        FROM("${table.name}");
    #foreach($field in ${table.fields})
            if(bean.get${field.capitalName}()!=null){
            WHERE("${field.name} = #{${field.propertyName}}");
            }
    #end
        }}.toString();
        }

public String insertBean(final ${entity} bean)
        {
        return new SQL(){{
        INSERT_INTO("${table.name}");
     #foreach($field in ${table.fields})
            if(bean.get${field.capitalName}()!=null){
            VALUES("${field.name}"," #{${field.propertyName}}");
            }
    #end
        }}.toString();
        }

public String updateBean(final ${entity} bean)
        {
        return new SQL(){{
        UPDATE("${table.name}");
    #foreach($field in ${table.fields})
            if(bean.get${field.capitalName}()!=null){
            SET("${field.name} = #{${field.propertyName}}");
            }
    #end
    #foreach($field in ${table.fields})
            if(bean.get${field.capitalName}()!=null){
            WHERE("${field.name} = #{${field.propertyName}}");
            }
    #end


        }}.toString();
        }
public String deleteBean(final ${entity} bean)
        {
        return new SQL(){{
        DELETE_FROM("${table.name}");
    #foreach($field in ${table.fields})
            if(bean.get${field.capitalName}()!=null){
            WHERE("${field.name} = #{${field.propertyName}}");
            }
    #end
        }}.toString();
        }
        }